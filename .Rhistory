knitr::opts_chunk$set(echo = TRUE, dev="httpgd", fig.show="hold")
#mean trading date
mean_days <- gold %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarise(count = n()) %>%
pull(count) %>%
mean()
knitr::opts_chunk$set(echo = TRUE, dev="httpgd", fig.show="hold")
library(dplyr)
library(tseries)
library(forecast)
library(lubridate)
gold <- read.csv("Gold Price.csv")
gold$Date <- as.Date(gold$Date)
gold <- gold[order(gold$Date),]
head(gold)
#gold price statistics
summary(gold$Price)
# check if there is missing value
sum(is.na(gold))
# detect outliers using IQR
boxplot(gold$Price, main="Gold Price Boxplot", col="lightblue")
Q1 <- quantile(gold$Price, 0.25)
Q3 <- quantile(gold$Price, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
outliers <- gold$Price[gold$Price < lower_bound | gold$Price > upper_bound]
print(outliers)
plot(gold$Date, gold$Price)
adf.test(gold$Price)
# check symmetry
hist(gold$Price, main = "Histogram of the Gold Price", xlab = "Gold Price")
#log transformation
gold$logPrice <- log(gold$Price)
#check symmetry
hist(gold$logPrice, main = "Histogram of Log Gold Price", xlab = "Log of Gold Price")
#adf test after log transformation
adf.test(gold$logPrice)
#BoxCox transformation
lambda = BoxCox.lambda(gold$Price)
print(paste("best lambda is:" ,lambda))
gold$boxcox = BoxCox(gold$Price, lambda = lambda)
hist(gold$boxcox, main = "histogram of BoxCox transformation")
#adf test after boxcox transformation
adf.test(gold$boxcox)
#mean trading date
mean_days <- gold %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarise(count = n()) %>%
pull(count) %>%
mean()
#basic information
n = nrow(gold)
y_start = 2014
m_start = 1
# trading days per year
ts = ts(gold$boxcox, start = c(y_start, m_start), frequency = 220)
#classical decomposition
gold_decomp <- decompose(ts, type = "additive")
plot(gold_decomp$trend)
# seasonality analysis per year
plot(gold_decomp$seasonal)
# stationary error
plot(gold_decomp$random)
#adf test after classical decomposition
# check if the residuals are stationary
# H0: the residuals are not pass as stationary time series
adf.test(na.omit(gold_decomp$random))
# use sample ACF to check residual
residuals <- na.omit(gold_decomp$random)
acf(residuals, main="ACF of Residuals", lag.max = 20)
pacf(residuals, main="PACF of Residuals")
# check residuals using another test (Ljung-Box Test)
# H0: the residuals are white noise (no autocorrelation)
Box.test(residuals, lag = 20, type = "Ljung-Box")
print(mean_days)
mean_days = floor(mean_days)
# trading days per year
ts = ts(gold$boxcox, start = c(y_start, m_start), frequency = mean_days
#mean trading date
mean_days <- gold %>%
knitr::opts_chunk$set(echo = TRUE, dev="httpgd", fig.show="hold")
library(dplyr)
library(tseries)
library(forecast)
library(lubridate)
gold <- read.csv("Gold Price.csv")
gold$Date <- as.Date(gold$Date)
gold <- gold[order(gold$Date),]
head(gold)
#gold price statistics
summary(gold$Price)
# check if there is missing value
sum(is.na(gold))
# detect outliers using IQR
boxplot(gold$Price, main="Gold Price Boxplot", col="lightblue")
Q1 <- quantile(gold$Price, 0.25)
Q3 <- quantile(gold$Price, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
outliers <- gold$Price[gold$Price < lower_bound | gold$Price > upper_bound]
print(outliers)
plot(gold$Date, gold$Price)
adf.test(gold$Price)
# check symmetry
hist(gold$Price, main = "Histogram of the Gold Price", xlab = "Gold Price")
#log transformation
gold$logPrice <- log(gold$Price)
#check symmetry
hist(gold$logPrice, main = "Histogram of Log Gold Price", xlab = "Log of Gold Price")
#adf test after log transformation
adf.test(gold$logPrice)
#BoxCox transformation
lambda = BoxCox.lambda(gold$Price)
print(paste("best lambda is:" ,lambda))
gold$boxcox = BoxCox(gold$Price, lambda = lambda)
hist(gold$boxcox, main = "histogram of BoxCox transformation")
#adf test after boxcox transformation
adf.test(gold$boxcox)
#mean trading date
mean_days <- gold %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarise(count = n()) %>%
pull(count) %>%
mean()
mean_days = floor(mean_days)
#basic information
n = nrow(gold)
y_start = 2014
m_start = 1
# trading days per year
ts = ts(gold$boxcox, start = c(y_start, m_start), frequency = mean_days
#classical decomposition
gold_decomp <- decompose(ts, type = "additive")
knitr::opts_chunk$set(echo = TRUE, dev="httpgd", fig.show="hold")
library(dplyr)
library(tseries)
library(forecast)
library(lubridate)
gold <- read.csv("Gold Price.csv")
gold$Date <- as.Date(gold$Date)
gold <- gold[order(gold$Date),]
head(gold)
#gold price statistics
summary(gold$Price)
# check if there is missing value
sum(is.na(gold))
# detect outliers using IQR
boxplot(gold$Price, main="Gold Price Boxplot", col="lightblue")
Q1 <- quantile(gold$Price, 0.25)
Q3 <- quantile(gold$Price, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
outliers <- gold$Price[gold$Price < lower_bound | gold$Price > upper_bound]
print(outliers)
plot(gold$Date, gold$Price)
adf.test(gold$Price)
# check symmetry
hist(gold$Price, main = "Histogram of the Gold Price", xlab = "Gold Price")
#log transformation
gold$logPrice <- log(gold$Price)
#check symmetry
hist(gold$logPrice, main = "Histogram of Log Gold Price", xlab = "Log of Gold Price")
#adf test after log transformation
adf.test(gold$logPrice)
#BoxCox transformation
lambda = BoxCox.lambda(gold$Price)
print(paste("best lambda is:" ,lambda))
gold$boxcox = BoxCox(gold$Price, lambda = lambda)
hist(gold$boxcox, main = "histogram of BoxCox transformation")
#adf test after boxcox transformation
adf.test(gold$boxcox)
#mean trading date
mean_days <- gold %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarise(count = n()) %>%
pull(count) %>%
mean()
mean_days = floor(mean_days)
#basic information
n = nrow(gold)
y_start = 2014
m_start = 1
# trading days per year
ts = ts(gold$boxcox, start = c(y_start, m_start), frequency = mean_days)
#classical decomposition
gold_decomp <- decompose(ts, type = "additive")
plot(gold_decomp$trend)
# seasonality analysis per year
plot(gold_decomp$seasonal)
# stationary error
plot(gold_decomp$random)
#adf test after classical decomposition
# check if the residuals are stationary
# H0: the residuals are not pass as stationary time series
adf.test(na.omit(gold_decomp$random))
# use sample ACF to check residual
residuals <- na.omit(gold_decomp$random)
acf(residuals, main="ACF of Residuals", lag.max = 20)
pacf(residuals, main="PACF of Residuals")
# check residuals using another test (Ljung-Box Test)
# H0: the residuals are white noise (no autocorrelation)
Box.test(residuals, lag = 20, type = "Ljung-Box")
model1 = auto.arima(residuals, ic = "aic", stationary = TRUE)
summary(model1)
summary(model1)
model1 = auto.arima(residuals, ic = "bic", stationary = TRUE)
summary(model1x)
model2 = auto.arima(residuals, ic = "bic", stationary = TRUE)
summary(model2)
par(mfrow = c(1,2))
Acf(residuals(model1), main = "ACF of New Residuals")
Pacf(residuals(model1), main = "PACF of New Residuals")
#Pacf(residuals(model1), main = "PACF of New Residuals")
```
par(mfrow = c(1,2))
Acf(residuals(model1), main = "ACF of New Residuals")
#Pacf(residuals(model1), main = "PACF of New Residuals")
Acf(residuals(model1), main = "ACF of New Residuals")
#Pacf(residuals(model1), main = "PACF of New Residuals")
Pacf(residuals(model1), main = "PACF of New Residuals")
acf(residuals(model1), main = "ACF of New Residuals")
pacf(residuals(model1), main = "PACF of New Residuals")
acf(residuals(model1), main = "ACF of New Residuals", lag.max = 1000)
acf(residuals(model1), main = "ACF of New Residuals", lag.max = 1000)
acf(residuals(model1), main = "ACF of New Residuals", lag.max = 20)
acf(residuals(model1), main = "ACF of New Residuals", lag.max = 500)
acf(residuals(model1), main = "ACF of New Residuals", lag.max = 20)
Acf(residuals(model1), main = "ACF of New Residuals")
acf(residuals(model1), main = "ACF of New Residuals")
acf(residuals(model1), main = "ACF of New Residuals", lag.max = 510)
acf(residuals(model1), main = "ACF of New Residuals")
pacf(residuals(model1), main = "PACF of New Residuals")
plot(residuals(model1))
hist(residuals(model1))
pacf(residuals(model1), main = "PACF of New Residuals", lag.max = 20)
pacf(residuals(model1), main = "PACF of New Residuals", lag.max = 50)
Box.test(residuals(best_model), lag = 20, type = "Ljung-Box")
Box.test(residuals(model1), lag = 20, type = "Ljung-Box")
Box.test(residuals(model1), type = "Ljung-Box")
Box.test(residuals(model1), lag = 20, type = "Ljung-Box")
Box.test(residuals(model1),, type = "Ljung-Box")
Box.test(residuals(model1), type = "Ljung-Box")
# check residuals using another test (Ljung-Box Test)
# H0: the residuals are white noise (no autocorrelation)
Box.test(residuals, type = "Ljung-Box")
knitr::opts_chunk$set(echo = TRUE, dev="httpgd", fig.show="hold")
library(dplyr)
library(tseries)
library(forecast)
library(lubridate)
gold <- read.csv("Gold Price.csv")
gold$Date <- as.Date(gold$Date)
gold <- gold[order(gold$Date),]
head(gold)
#gold price statistics
summary(gold$Price)
# check if there is missing value
sum(is.na(gold))
# detect outliers using IQR
boxplot(gold$Price, main="Gold Price Boxplot", col="lightblue")
Q1 <- quantile(gold$Price, 0.25)
Q3 <- quantile(gold$Price, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
outliers <- gold$Price[gold$Price < lower_bound | gold$Price > upper_bound]
print(outliers)
plot(gold$Date, gold$Price)
adf.test(gold$Price)
# check symmetry
hist(gold$Price, main = "Histogram of the Gold Price", xlab = "Gold Price")
#log transformation
gold$logPrice <- log(gold$Price)
#check symmetry
hist(gold$logPrice, main = "Histogram of Log Gold Price", xlab = "Log of Gold Price")
#adf test after log transformation
adf.test(gold$logPrice)
#BoxCox transformation
lambda = BoxCox.lambda(gold$Price)
print(paste("best lambda is:" ,lambda))
gold$boxcox = BoxCox(gold$Price, lambda = lambda)
hist(gold$boxcox, main = "histogram of BoxCox transformation")
#adf test after boxcox transformation
adf.test(gold$boxcox)
#mean trading date
mean_days <- gold %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarise(count = n()) %>%
pull(count) %>%
mean()
mean_days = floor(mean_days)
#basic information
n = nrow(gold)
y_start = 2014
m_start = 1
# trading days per year
ts = ts(gold$boxcox, start = c(y_start, m_start), frequency = mean_days)
#classical decomposition
gold_decomp <- decompose(ts, type = "additive")
plot(gold_decomp$trend)
# seasonality analysis per year
plot(gold_decomp$seasonal)
# stationary error
plot(gold_decomp$random)
#adf test after classical decomposition
# check if the residuals are stationary
# H0: the residuals are not pass as stationary time series
adf.test(na.omit(gold_decomp$random))
# use sample ACF to check residual
residuals <- na.omit(gold_decomp$random)
acf(residuals, main="ACF of Residuals", lag.max = 20)
pacf(residuals, main="PACF of Residuals")
# check residuals using another test (Ljung-Box Test)
# H0: the residuals are white noise (no autocorrelation)
Box.test(residuals, type = "Ljung-Box")
#arma model
model1 = auto.arima(residuals, ic = "aic", stationary = TRUE)
summary(model1x)
knitr::opts_chunk$set(echo = TRUE, dev="httpgd", fig.show="hold")
library(dplyr)
library(tseries)
library(forecast)
library(lubridate)
gold <- read.csv("Gold Price.csv")
gold$Date <- as.Date(gold$Date)
gold <- gold[order(gold$Date),]
head(gold)
#gold price statistics
summary(gold$Price)
# check if there is missing value
sum(is.na(gold))
# detect outliers using IQR
boxplot(gold$Price, main="Gold Price Boxplot", col="lightblue")
Q1 <- quantile(gold$Price, 0.25)
Q3 <- quantile(gold$Price, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
outliers <- gold$Price[gold$Price < lower_bound | gold$Price > upper_bound]
print(outliers)
plot(gold$Date, gold$Price)
adf.test(gold$Price)
# check symmetry
hist(gold$Price, main = "Histogram of the Gold Price", xlab = "Gold Price")
#log transformation
gold$logPrice <- log(gold$Price)
#check symmetry
hist(gold$logPrice, main = "Histogram of Log Gold Price", xlab = "Log of Gold Price")
#adf test after log transformation
adf.test(gold$logPrice)
#BoxCox transformation
lambda = BoxCox.lambda(gold$Price)
print(paste("best lambda is:" ,lambda))
gold$boxcox = BoxCox(gold$Price, lambda = lambda)
hist(gold$boxcox, main = "histogram of BoxCox transformation")
#adf test after boxcox transformation
adf.test(gold$boxcox)
#mean trading date
mean_days <- gold %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarise(count = n()) %>%
pull(count) %>%
mean()
mean_days = floor(mean_days)
#basic information
n = nrow(gold)
y_start = 2014
m_start = 1
# trading days per year
ts = ts(gold$boxcox, start = c(y_start, m_start), frequency = mean_days)
#classical decomposition
gold_decomp <- decompose(ts, type = "additive")
plot(gold_decomp$trend)
# seasonality analysis per year
plot(gold_decomp$seasonal)
# stationary error
plot(gold_decomp$random)
#adf test after classical decomposition
# check if the residuals are stationary
# H0: the residuals are not pass as stationary time series
adf.test(na.omit(gold_decomp$random))
# use sample ACF to check residual
residuals <- na.omit(gold_decomp$random)
acf(residuals, main="ACF of Residuals", lag.max = 20)
pacf(residuals, main="PACF of Residuals")
# check residuals using another test (Ljung-Box Test)
# H0: the residuals are white noise (no autocorrelation)
Box.test(residuals, type = "Ljung-Box")
#arma model
model1 = auto.arima(residuals, ic = "aic", stationary = TRUE)
summary(model1)
acf(residuals(model1), main = "ACF of New Residuals")
pacf(residuals(model1), main = "PACF of New Residuals", lag.max = 50)
hist(residuals(model1))
# check residuals using another test (Ljung-Box Test)
# H0: the residuals are white noise (no autocorrelation)
Box.test(residuals(model1), type = "Ljung-Box")
seasonal = gold_decomp$seasonal
trend = gold_decomp$trend
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
trend = data.frame(t = seq_along(trend), trend = trend)
seasonal = data.frame(t = seq_along(seasonal), trend = trendd)
seasonal = data.frame(t = seq_along(seasonal), trend = seasonal)
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
trend = data.frame(t = seq_along(trend), trend = trend)
seasonal = data.frame(t = seq_along(seasonal), trend = seasonal)
#trend fitting
trend_model = lm(trend ~ t, data = trend)
seasonal_model = lm(trend ~ t, data = seasonal)
#model summary
summary(trend_model)
summary(seasonal_model)
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
trend = data.frame(t = seq_along(trend), trend = trend)
seasonal = data.frame(t = seq_along(seasonal), trend = seasonal)
#trend fitting
trend_model = lm(trend ~ t, data = trend)
seasonal_model = lm(trend ~ t, data = seasonal)
#model summary
summary(trend_model)
summary(seasonal_model)
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
trend = data.frame(t = seq_along(trend), trend = trend)
seasonal = data.frame(t = seq_along(seasonal), trend = seasonal)
#trend fitting
trend_model = lm(trend ~ t, data = trend)
seasonal_model = lm(seasonal ~ t, data = seasonal)
seasonal_model = lm(trend ~ t, data = seasonal)
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
trend = data.frame(t = seq_along(trend), trend = trend)
seasonal = data.frame(t = seq_along(seasonal), trend = seasonal)
#trend fitting
trend_model = lm(trend ~ t, data = trend)
seasonal_model = lm(trend ~ t, data = seasonal)
#model summary
summary(trend_model)
summary(seasonal_model)
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
df_trend = data.frame(t = seq_along(trend), trend = trend)
df_seasonal = data.frame(t = seq_along(seasonal), seasonal = seasonal)
#trend fitting
trend_model = lm(trend ~ t, data = trend_df)
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
df_trend = data.frame(t = seq_along(trend), trend = trend)
df_seasonal = data.frame(t = seq_along(seasonal), seasonal = seasonal)
#trend fitting
trend_model = lm(trend ~ t, data = df_trend)
seasonal_model = lm(seasonal ~ t, data = df_easonal)
#model samples
trend = gold_decomp$trend
seasonal = gold_decomp$seasonal
df_trend = data.frame(t = seq_along(trend), trend = trend)
df_seasonal = data.frame(t = seq_along(seasonal), seasonal = seasonal)
#trend fitting
trend_model = lm(trend ~ t, data = df_trend)
seasonal_model = lm(seasonal ~ t, data = df_seasonal)
#model summary
summary(trend_model)
summary(seasonal_model)
